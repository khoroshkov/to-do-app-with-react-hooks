{"version":3,"sources":["context.js","helpers/mapOrder.js","reducer.js","TodoItem.js","TodoList.js","App.js","index.js"],"names":["Context","React","createContext","mapOrder","array","order","key","sort","a","b","A","B","indexOf","reducer","state","_ref","type","payload","concat","Object","toConsumableArray","id","uuidv4","title","completed","map","todo","filter","TodoItem","index","dispatch","useContext","cls","push","react_default","createElement","react_beautiful_dnd_esm","draggableId","provided","assign","className","join","draggableProps","dragHandleProps","ref","innerRef","checked","onChange","onClick","TodoList","todos","droppableId","droppableProps","item","placeholder","App","_useReducer","useReducer","JSON","parse","localStorage","getItem","stringify","_useReducer2","slicedToArray","_useState","useState","_useState2","todoTitle","setTodoTitle","useEffect","setItem","onDragEnd","result","destination","source","newTaskIds","Array","from","splice","Provider","value","event","target","onKeyPress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f4ec7e8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Context = React.createContext();\r\n","const mapOrder = (array, order, key) => {\r\n  array.sort(function (a, b) {\r\n    var A = a[key],\r\n      B = b[key];\r\n\r\n    if (order.indexOf(A) > order.indexOf(B)) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  });\r\n\r\n  return array;\r\n};\r\n\r\nexport default mapOrder;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport mapOrder from \"./helpers/mapOrder\";\r\n\r\nexport default function (state, { type, payload }) {\r\n  switch (type) {\r\n    case \"add\":\r\n      return [...state, { id: uuidv4(), title: payload, completed: false }];\r\n\r\n    case \"toggle\":\r\n      return state.map((todo) => {\r\n        if (todo.id === payload) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      });\r\n\r\n    case \"remove\":\r\n      return state.filter((todo) => todo.id !== payload);\r\n\r\n    case \"changeOrder\":\r\n      return mapOrder(state, payload, \"id\");\r\n    // const newState = mapOrder(state, payload, \"id\")\r\n    // return newState\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useContext } from \"react\";\nimport { Context } from \"./context\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nexport default function TodoItem({ title, id, completed, index }) {\n  const { dispatch } = useContext(Context);\n\n  const cls = [\"todo\"];\n\n  if (completed) {\n    cls.push(\"completed\");\n  }\n\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <li className={cls.join(\" \")} \n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        >\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              onChange={() =>\n                dispatch({\n                  type: \"toggle\",\n                  payload: id,\n                })\n              }\n            />\n            <span>{title}</span>\n\n            <i\n              className=\"material-icons red-text\"\n              onClick={() =>\n                dispatch({\n                  type: \"remove\",\n                  payload: id,\n                })\n              }\n            >\n              delete\n            </i>\n          </label>\n        </li>\n      )}\n    </Draggable>\n  );\n}\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function TodoList({ todos }) {\n const  id = uuidv4()\n  return (\n    <Droppable droppableId={id}>\n      {(provided) => (\n        <ul \n        ref={provided.innerRef}\n        {...provided.droppableProps}>\n          {todos.map((item, index) => (\n            <TodoItem key={item.id} index={index} {...item} />\n          ))}\n          {provided.placeholder}\n        </ul>\n      )}\n    </Droppable>\n  );\n}\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport { Context } from \"./context\";\nimport reducer from \"./reducer\";\nimport TodoList from \"./TodoList\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import DoneTodosCounter from \"./TodosCounter\";\n\nexport default function App() {\n  const [state, dispatch] = useReducer(\n    reducer,\n    JSON.parse(localStorage.getItem(\"todos\") || JSON.stringify([]))\n  );\n\n  const [todoTitle, setTodoTitle] = useState(\"\");\n  //const [todos, setTodos] = useState([]);\n\n  // useEffect(() => {\n  //   const savedTodos = localStorage.getItem(\"todos\") || JSON.stringify([]);\n\n  //   setTodos(JSON.parse(savedTodos));\n  // }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(state));\n  }, [state]);\n\n  const addTodo = (event) => {\n    if (event.key === \"Enter\") {\n      dispatch({\n        type: \"add\",\n        payload: todoTitle,\n      });\n      setTodoTitle(\"\");\n    }\n  };\n\n  // const removeTodo = (id) => {\n  //   setTodos(\n  //     todos.filter((todo) => {\n  //       return todo.id !== id;\n  //     })\n  //   );\n  // };\n\n  // const toggleTodo = (id) => {\n  //   setTodos(\n  //     todos.map((todo) => {\n  //       if (todo.id === id) {\n  //         todo.completed = !todo.completed;\n  //       }\n  //       return todo;\n  //     })\n  //   );\n  // };\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const newTaskIds = Array.from(state.map((state) => state.id));\n\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    dispatch({\n      type: \"changeOrder\",\n      payload: newTaskIds,\n    });\n\n    localStorage.setItem(\"todos\", JSON.stringify(state));\n  };\n\n    // =============== counter\n   \n\n\n    // const count = () => {\n    //   return state.filter((todo) => todo.completed).length\n    // }\n    // console.log(count());\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Context.Provider\n        value={{\n          dispatch,\n        }}\n      >\n        <div className=\"container\">\n          <h1>My TODO app</h1>\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              value={todoTitle}\n              onChange={(event) => setTodoTitle(event.target.value)}\n              onKeyPress={addTodo}\n            />\n            <label>Add task</label>\n          </div>\n          <TodoList todos={state} />\n        </div>\n        {/* <DoneTodosCounter/> */}\n      </Context.Provider>\n    </DragDropContext>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}